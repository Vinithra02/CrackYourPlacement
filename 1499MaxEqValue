class monoqueue(collections.deque):
    def enq(self,val):
        count=1
        while self and val>self[-1][0]:
            count+=self.pop()[1]
        self.append([val,count])
    def deq(self):
        ans=self.max()
        self[0][1]-=1
        if self[0][1]<=0:
            self.popleft()
        return ans
    def max(self):
        return self[0][0] if self else None
class Solution:
    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:
        n = len(points)
        mq=monoqueue()
        res=float('-inf')
        i=0
        for j in range(n):
            while i<j and points[j][0]-points[i][0]>k:
                i+=1
                mq.deq()
            mx=mq.max()
            if mx is not None:
                res=max(res,mx+points[j][0]+ points[j][1])
            dif=points[j][1]-points[j][0]
            mq.enq(dif)
        return res
##we use monoqueue to keep track of the current highest yi-xi value
## given yi+yj+|xi-xj| should be maximum so when we solve this equation further we get yi+yj+xj-xi ==  yi-xi+yj+xj
## a monoqueue always has the highest value in the first index. 
## if the top of the monoqueue does not satisfy the condition, then we pop from the queue and continue till the next
    
    
